import datetime as dt
import pandas as pd
import streamlit as st
import sqlite3
import os
import webbrowser
from io import BytesIO
import hashlib
from pathlib import Path

# Admin configuration
ADMIN_USERNAME = "Adityakarthik"
ADMIN_PASSWORD_HASH = "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"

# SharePoint configuration
SHAREPOINT_FOLDER_URL = "https://trten.sharepoint.com/sites/CPT-RPurohit/Shared%20Documents/Forms/AllItems.aspx?CID=ed5bb29a%2D39bb%2D4316%2Dbad5%2D66acedda78ba&FolderCTID=0x01200077D40D3D6B480D4DBC70A0833B88D7DD&id=%2Fsites%2FCPT%2DRPurohit%2FShared%20Documents%2FGeneral%2F2025%2FBLR%20productivity%20gains"

def hash_password(password):
    """Hash password for secure storage."""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_admin(username, password):
    """Verify admin credentials."""
    return (username.strip() == ADMIN_USERNAME and 
            hash_password(password) == ADMIN_PASSWORD_HASH)

def get_desktop_upload_folder():
    """Get desktop upload folder for easy access."""
    username = os.getenv('USERNAME', '6128787')
    desktop_folder = f"C:\\Users\\{username}\\Desktop\\SharePoint_Ready"
    os.makedirs(desktop_folder, exist_ok=True)
    return desktop_folder

def smart_upload_process(file_data, filename):
    """Smart upload process that works within network constraints."""
    try:
        # Save to desktop for easy access
        desktop_folder = get_desktop_upload_folder()
        file_path = os.path.join(desktop_folder, filename)
        
        with open(file_path, 'wb') as f:
            f.write(file_data)
        
        # Open SharePoint automatically
        webbrowser.open(SHAREPOINT_FOLDER_URL)
        
        return True, f" File ready for upload! Saved to Desktop and SharePoint opened.", file_path
        
    except Exception as e:
        return False, f"❌ Save failed: {str(e)}", ""

def init_db():
    """Initialize the database."""
    with sqlite3.connect("data.db") as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS entries (
                leader TEXT,
                gains TEXT,
                dotted_gains TEXT,
                start_date TEXT,
                end_date TEXT
            )
        """)

def get_sprint_data(start_date, end_date):
    """Get data for a specific sprint period."""
    with sqlite3.connect("data.db") as conn:
        cursor = conn.execute(
            "SELECT leader, gains, dotted_gains FROM entries WHERE start_date=? AND end_date=?",
            (start_date.isoformat(), end_date.isoformat())
        )
        return cursor.fetchall()

def save_sprint_data(start_date, end_date, data_rows):
    """Save data for a sprint period."""
    with sqlite3.connect("data.db") as conn:
        conn.execute(
            "DELETE FROM entries WHERE start_date=? AND end_date=?",
            (start_date.isoformat(), end_date.isoformat())
        )
        
        for row in data_rows:
            if row[0] and str(row[0]).strip():
                conn.execute(
                    "INSERT INTO entries (leader, gains, dotted_gains, start_date, end_date) VALUES (?, ?, ?, ?, ?)",
                    (str(row[0]).strip(), str(row[1]).strip(), str(row[2]).strip(), 
                     start_date.isoformat(), end_date.isoformat())
                )
        conn.commit()

def create_excel_file(dataframe, start_date, end_date):
    """Create Excel file from DataFrame with proper formatting."""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        info_data = {
            'Sprint Information': [
                'Start Date', 'End Date', 'Generated On', 'Generated By',
                'Total Leaders', 'SharePoint Location', 'File Purpose', 'Upload Instructions'
            ],
            'Value': [
                start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'), 
                dt.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'Sprint Productivity Tracker - SMART Upload',
                len(dataframe), SHAREPOINT_FOLDER_URL,
                'BLR Team Productivity Tracking',
                'File auto-saved to Desktop. SharePoint opened for drag-and-drop upload.'
            ]
        }
        info_df = pd.DataFrame(info_data)
        info_df.to_excel(writer, sheet_name='Sprint Info', index=False)
        
        formatted_df = dataframe.copy()
        formatted_df.columns = [
            'Leader Name', 'Direct Productivity Gains (Hours)', 'Dotted Team Productivity Gains (Hours)'
        ]
        
        total_leaders = len(dataframe)
        summary_row = pd.DataFrame({
            'Leader Name': ['=== SUMMARY ==='],
            'Direct Productivity Gains (Hours)': [f'Total Leaders: {total_leaders}'],
            'Dotted Team Productivity Gains (Hours)': [f'Sprint: {start_date} to {end_date}']
        })
        
        final_df = pd.concat([formatted_df, summary_row], ignore_index=True)
        final_df.to_excel(writer, sheet_name='Productivity Data', index=False)
        
    return output.getvalue()

# Initialize Streamlit app
st.set_page_config(page_title="Sprint Productivity Tracker", layout="wide")

st.title(" Sprint Productivity Tracker")
st.markdown("**Team collaboration tool | SMART SharePoint Upload | Network Security Compatible**")

init_db()

st.success(f" **SharePoint Ready:** [BLR Productivity Gains Folder]({SHAREPOINT_FOLDER_URL})")

# Date selection
st.subheader(" Sprint Period Selection")
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("From Date (Sprint Start)", value=dt.date.today() - dt.timedelta(days=14))
with col2:
    end_date = st.date_input("To Date (Sprint End)", value=dt.date.today())

if start_date > end_date:
    st.error(" Start date cannot be after end date!")
    st.stop()

st.divider()

# Main tabs
tab1, tab2, tab3 = st.tabs([" Team Data Entry", " SMART Upload", " Admin Actions"])

# Team data entry tab
with tab1:
    st.subheader("Team Data Entry")
    st.info("Enter productivity gains for the selected sprint period.")
    
    existing_data = get_sprint_data(start_date, end_date)
    
    if existing_data:
        df_data = [[str(row[0]), str(row[1]), str(row[2])] for row in existing_data]
    else:
        df_data = [["", "", ""], ["", "", ""], ["", "", ""]]
    
    df = pd.DataFrame(df_data, columns=[
        "Name of the leader",
        "Productivity Gains (In Hours)",
        "+ Productivity Gains (Dotted Team) (In Hours)"
    ]).astype(str)
    
    edited_df = st.data_editor(df, num_rows="dynamic", use_container_width=True)
    
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("💾 Save Data", type="primary"):
            try:
                data_to_save = []
                for _, row in edited_df.iterrows():
                    data_to_save.append((
                        str(row["Name of the leader"]),
                        str(row["Productivity Gains (In Hours)"]),
                        str(row["+ Productivity Gains (Dotted Team) (In Hours)"])
                    ))
                
                save_sprint_data(start_date, end_date, data_to_save)
                st.success(" Data saved successfully!")
                st.rerun()
            except Exception as e:
                st.error(f"Error saving data: {str(e)}")
    
    with col2:
        st.info(" Click 'Save Data' then use 'SMART Upload' tab")

# SMART Upload tab
with tab2:
    st.subheader(" SMART SharePoint Upload")
    st.info("Network-compatible upload: Auto-save to Desktop + Auto-open SharePoint for easy drag-and-drop!")
    
    sprint_data = get_sprint_data(start_date, end_date)
    
    if sprint_data:
        display_df = pd.DataFrame(sprint_data, columns=[
            "Name of the leader", "Productivity Gains (In Hours)", "+ Productivity Gains (Dotted Team) (In Hours)"
        ])
        
        st.subheader(" Current Sprint Data Preview")
        st.dataframe(display_df, use_container_width=True)
        
        filename = f"BLR_Productivity_Gains_{start_date.strftime('%Y%m%d')}_to_{end_date.strftime('%Y%m%d')}.xlsx"
        excel_data = create_excel_file(display_df, start_date, end_date)
        
        st.subheader(" SMART Upload Process")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button(" SMART Upload to SharePoint", type="primary"):
                with st.spinner(" Preparing smart upload..."):
                    success, message, file_path = smart_upload_process(excel_data, filename)
                    
                    if success:
                        st.success(message)
                        st.balloons()
                        st.success(" **READY FOR SHAREPOINT UPLOAD!**")
                        st.info("**Next Steps:**")
                        st.write("1.  **File saved** to your Desktop in 'SharePoint_Ready' folder")
                        st.write("2.  **SharePoint opened** in your browser")
                        st.write("3.  **Drag and drop** the Excel file to SharePoint")
                        st.write("4.  **Done!** File will be available to your team")
                        
                        st.info(f" **File location:** `{file_path}`")
                        st.info(f" **File size:** {len(excel_data):,} bytes")
                        st.info(f" **Generated:** {dt.datetime.now().strftime('%H:%M:%S')}")
                    else:
                        st.error(message)
        
        with col2:
            st.download_button(
                label=" Download Excel",
                data=excel_data,
                file_name=filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                type="secondary"
            )
        
        with col3:
            if st.button("🌐 Open SharePoint", type="secondary"):
                webbrowser.open(SHAREPOINT_FOLDER_URL)
                st.success(" SharePoint opened")
        
        # Instructions
        st.subheader(" SMART Upload Process")
        st.info("**How it works (Network Security Compatible):**")
        st.write("1. 📁 **Auto-Save** - File automatically saved to Desktop\\SharePoint_Ready")
        st.write("2.  **Auto-Open** - SharePoint folder opens in your browser")
        st.write("3.  **Easy Access** - File ready in convenient Desktop location")
        st.write("4.  **Drag & Drop** - Simply drag file from Desktop to SharePoint")
        st.write("5.  **Team Access** - File immediately available to your team")
        
        # Quick access
        desktop_folder = get_desktop_upload_folder()
        if st.button(" Open Desktop SharePoint Folder"):
            try:
                os.startfile(desktop_folder)
                st.success("Desktop folder opened")
            except:
                st.info(f"Folder: {desktop_folder}")
        
        st.subheader(" File Details")
        st.code(filename)
        st.write(f"**File size:** {len(excel_data):,} bytes")
        
    else:
        st.warning("⚠️ No data available for the selected sprint period.")
        st.info(" Go to 'Team Data Entry' tab to add productivity data first.")

# Admin tab
with tab3:
    st.subheader(" Admin Actions - Adityakarthik Only")
    
    col1, col2 = st.columns(2)
    with col1:
        admin_username = st.text_input(" Username:")
    with col2:
        admin_password = st.text_input(" Password:", type="password")
    
    if st.button(" Login as Admin"):
        if verify_admin(admin_username, admin_password):
            st.session_state.admin_authenticated = True
            st.success(f" Welcome {admin_username}!")
            st.rerun()
        else:
            st.error(" Invalid credentials.")
    
    if st.session_state.get('admin_authenticated', False):
        if st.button(" Logout"):
            st.session_state.admin_authenticated = False
            st.rerun()
        
        st.divider()
        if st.button(" Clear All Data"):
            if st.checkbox(" Confirm deletion"):
                with sqlite3.connect("data.db") as conn:
                    conn.execute("DELETE FROM entries")
                    conn.commit()
                st.success(" All data cleared!")
                st.rerun()
    else:
        st.info("**Admin Credentials:** Username: Adityakarthik | Password: admin123")

st.divider()
st.caption("Sprint Productivity Tracker v8.0 | SMART SharePoint Upload | Network Security Compatible")
